$ python tests/ststl_tests/test_contracts_ststl.py 

Contract ID: c1
  Deterministic Variables: 
    x, CONTINUOUS, [-10000, 10000]
    y, CONTINUOUS, [-10000, 10000]
  Non-Deterministic Variables: 
    w1, CONTINUOUS
    w2, CONTINUOUS
    mean: [0, 2]
    cov: [[1, 0], [0, 1]]
  Assumption: G[0,3] (5 <= x)
  Guarantee: G[1,3] (P[0.95] (y - 2*w1 + 3*w2 <= 8))
  Saturated Guarantee: (G[0,3] (5 <= x)) -> (G[1,3] (P[0.95] (y - 2*w1 + 3*w2 <= 8)))
  isSat: True

====================================================================================
Checking compatibility of the contract c1...
Set parameter Username
Academic license - for non-commercial use only - expires 2023-07-27
Contract c1 is compatible.

Printing a behavior that satisfies the assumptions of the contract c1...
x__0: 10000.0
x__1: 10000.0
x__2: 10000.0
x__3: 10000.0
y__0: 10000.0
y__1: 10000.0
y__2: 10000.0
y__3: 10000.0
====================================================================================
Checking consistency of the contract c1...
Contract c1 is consistent.

Printing a behavior that satisfies the saturated guarantees of the contract c1...
x__0: 4.999900000000707
x__1: 4.999900000000707
x__2: 4.999900000000707
x__3: 4.999900000000707
y__0: -10000.0
y__1: 9996.069395907394
y__2: 9996.069395907394
y__3: 9996.069395907394
====================================================================================
Checking feasibility of the contract c1...
Contract c1 is feasible.

Printing a behavior that satisfies both the assumptions and guarantees of the contract c1...
x__0: 10000.000000000002
x__1: 10000.000000000002
x__2: 10000.000000000002
x__3: 10000.000000000002
y__0: -10000.0
y__1: -3.9306040926057904
y__2: -3.9306040926057904
y__3: -3.9306040926057904
Contract ID: c2
  Deterministic Variables: 
    x, CONTINUOUS, [-10000, 10000]
    y, CONTINUOUS, [-10000, 10000]
  Non-Deterministic Variables: 
    w1, CONTINUOUS
    w2, CONTINUOUS
    mean: [0, 2]
    cov: [[1, 0], [0, 1]]
  Assumption: F[1,2] (4 <= x)
  Guarantee: G[1,3] (P[0.97] (y - 2*w1 + 3*w2 <= 8))
  Saturated Guarantee: (F[1,2] (4 <= x)) -> (G[1,3] (P[0.97] (y - 2*w1 + 3*w2 <= 8)))
  isSat: True

====================================================================================
Checking compatibility of the contract c2...
Contract c2 is compatible.

Printing a behavior that satisfies the assumptions of the contract c2...
x__0: 10000.0
x__1: 10000.0
x__2: 10000.0
x__3: 10000.0
y__0: 10000.0
y__1: 10000.0
y__2: 10000.0
y__3: 10000.0
====================================================================================
Checking consistency of the contract c2...
Contract c2 is consistent.

Printing a behavior that satisfies the saturated guarantees of the contract c2...
x__0: -10000.0
x__1: 3.9999000000007072
x__2: 3.9999000000007072
x__3: -10000.0
y__0: -10000.0
y__1: 9995.218702207245
y__2: 9995.218702207245
y__3: 9995.218702207245
====================================================================================
Checking feasibility of the contract c2...
Contract c2 is feasible.

Printing a behavior that satisfies both the assumptions and guarantees of the contract c2...
x__0: -10000.0
x__1: 10000.000000000002
x__2: 3.9999
x__3: -10000.0
y__0: -10000.0
y__1: -4.78129779275514
y__2: -4.78129779275514
y__3: -4.78129779275514
Contract ID: c3
  Deterministic Variables: 
    x, CONTINUOUS, [-10000, 10000]
    y, CONTINUOUS, [-10000, 10000]
  Non-Deterministic Variables: 
    w1, CONTINUOUS
    w2, CONTINUOUS
    mean: [0, 2]
    cov: [[1, 0], [0, 1]]
  Assumption: F[1,2] (4 <= x)
  Guarantee: G[1,3] (P[0.65] (y - 2*w1 + 3*w2 <= 8))
  Saturated Guarantee: (F[1,2] (4 <= x)) -> (G[1,3] (P[0.65] (y - 2*w1 + 3*w2 <= 8)))
  isSat: True

====================================================================================
Checking compatibility of the contract c3...
Contract c3 is compatible.

Printing a behavior that satisfies the assumptions of the contract c3...
x__0: 10000.0
x__1: 10000.0
x__2: 10000.0
x__3: 10000.0
y__0: 10000.0
y__1: 10000.0
y__2: 10000.0
y__3: 10000.0
====================================================================================
Checking consistency of the contract c3...
Contract c3 is consistent.

Printing a behavior that satisfies the saturated guarantees of the contract c3...
x__0: -10000.0
x__1: 3.9999000000007072
x__2: 3.9999000000007072
x__3: -10000.0
y__0: -10000.0
y__1: 10000.0
y__2: 10000.0
y__3: 10000.0
====================================================================================
Checking feasibility of the contract c3...
Contract c3 is feasible.

Printing a behavior that satisfies both the assumptions and guarantees of the contract c3...
x__0: -10000.0
x__1: 10000.000000000002
x__2: 3.9999
x__3: -10000.0
y__0: -10000.0
y__1: 0.6107073008824955
y__2: 0.6107073008824955
y__3: 0.6107073008824955
====================================================================================
Checking whether contract c2 refines contract c1...
Checking assumptions condition for refinement...
Checking guarantees condition for refinement...
Contract c2 refines c1.

====================================================================================
Checking whether contract c3 refines contract c1...
Checking assumptions condition for refinement...
Checking guarantees condition for refinement...
Guarantees condition for refinement violated. Contract c3 does not refine contract c1.

Printing a counterexample which violates guarantees condition for refinement...
x__0: 10000.000000000002
x__1: 5.0
x__2: 5.0
x__3: 10000.000000000002
y__0: -10000.0
y__1: 0.6107073008824955
y__2: 0.6107073008824955
y__3: 0.6107073008824955