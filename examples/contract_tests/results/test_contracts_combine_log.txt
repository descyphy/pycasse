$ python examples/contract_tests/test_contracts_combine.py 

Contract ID: c1
  Deterministic Variables: 
    x, CONTINUOUS, [-10000, 10000]
    y, CONTINUOUS, [-10000, 10000]
  Assumption: G[0,3] (x => 5)
  Guarantee: F[1,4] (y => 1)
  Saturated Guarantee: (G[0,3] (x => 5)) -> (F[1,4] (y => 1))
  isSat: True

====================================================================================
Checking compatibility of the contract c1...
Set parameter Username
Academic license - for non-commercial use only - expires 2023-07-27
Contract c1 is compatible.

Printing a behavior that satisfies the assumptions of the contract c1...
x__0: 10000.0
x__1: 10000.0
x__2: 10000.0
x__3: 10000.0
x__4: 10000.0
y__0: 10000.0
y__1: 10000.0
y__2: 10000.0
y__3: 10000.0
y__4: 10000.0
====================================================================================
Checking consistency of the contract c1...
Contract c1 is consistent.

Printing a behavior that satisfies the saturated guarantees of the contract c1...
x__0: 4.999900000000707
x__1: 4.999900000000707
x__2: 4.999900000000707
x__3: 4.999900000000707
x__4: -10000.0
y__0: -10000.0
y__1: 10000.000000000002
y__2: 10000.000000000002
y__3: 10000.000000000002
y__4: 10000.000000000002
====================================================================================
Checking feasibility of the contract c1...
Contract c1 is feasible.

Printing a behavior that satisfies both the assumptions and guarantees of the contract c1...
x__0: 10000.0
x__1: 10000.0
x__2: 10000.0
x__3: 10000.0
x__4: 10000.0
y__0: 10000.0
y__1: 10000.0
y__2: 10000.0
y__3: 10000.0
y__4: 10000.0
Contract ID: c2
  Deterministic Variables: 
    y, CONTINUOUS, [-10000, 10000]
  Assumption: True
  Guarantee: G[0,4] (y <= 0)
  Saturated Guarantee: G[0,4] (y <= 0)
  isSat: True

====================================================================================
Checking compatibility of the contract c2...
Contract c2 is compatible.

Printing a behavior that satisfies the assumptions of the contract c2...
y__0: 10000.0
y__1: 10000.0
y__2: 10000.0
y__3: 10000.0
y__4: 10000.0
====================================================================================
Checking consistency of the contract c2...
Contract c2 is consistent.

Printing a behavior that satisfies the saturated guarantees of the contract c2...
y__0: 0.0
y__1: 0.0
y__2: 0.0
y__3: 0.0
y__4: 0.0
====================================================================================
Checking feasibility of the contract c2...
Contract c2 is feasible.

Printing a behavior that satisfies both the assumptions and guarantees of the contract c2...
y__0: 0.0
y__1: 0.0
y__2: 0.0
y__3: 0.0
y__4: 0.0
Contract ID: c1^c2
  Deterministic Variables: 
    x, CONTINUOUS, [-10000, 10000]
    y, CONTINUOUS, [-10000, 10000]
  Assumption: (G[0,3] (x => 5)) | (True)
  Guarantee: ((G[0,3] (x => 5)) -> (F[1,4] (y => 1))) & (G[0,4] (y <= 0))
  Saturated Guarantee: ((G[0,3] (x => 5)) -> (F[1,4] (y => 1))) & (G[0,4] (y <= 0))
  isSat: True

====================================================================================
Checking compatibility of the contract c1^c2...
Contract c1^c2 is compatible.

====================================================================================
Checking consistency of the contract c1^c2...
Contract c1^c2 is consistent.

====================================================================================
Checking feasibility of the contract c1^c2...
Contract c1^c2 is feasible.

Contract ID: c1*c2
  Deterministic Variables: 
    x, CONTINUOUS, [-10000, 10000]
    y, CONTINUOUS, [-10000, 10000]
  Assumption: ((G[0,3] (x => 5)) & (True)) | (!((G[0,3] (x => 5)) -> (F[1,4] (y => 1)))) | (!(G[0,4] (y <= 0)))
  Guarantee: ((G[0,3] (x => 5)) -> (F[1,4] (y => 1))) & (G[0,4] (y <= 0))
  Saturated Guarantee: ((G[0,3] (x => 5)) -> (F[1,4] (y => 1))) & (G[0,4] (y <= 0))
  isSat: True

====================================================================================
Checking compatibility of the contract c1*c2...
Contract c1*c2 is compatible.

Printing a behavior that satisfies the assumptions of the contract c1*c2...
x__0: 5.000000000000556
x__1: 5.000000000000556
x__2: 5.000000000000556
x__3: 5.000000000000556
x__4: -10000.0
y__0: 10000.0
y__1: 1.0
y__2: 0.0
y__3: 0.0
y__4: 0.0
====================================================================================
Checking consistency of the contract c1*c2...
Contract c1*c2 is consistent.

Printing a behavior that satisfies the saturated guarantees of the contract c1*c2...
x__0: 4.999900000000707
x__1: 4.999900000000707
x__2: 4.999900000000707
x__3: 4.999900000000707
x__4: -10000.0
y__0: 0.0
y__1: 0.0
y__2: 0.0
y__3: 0.0
y__4: 0.0
====================================================================================
Checking feasibility of the contract c1*c2...
Contract c1*c2 is not feasible.